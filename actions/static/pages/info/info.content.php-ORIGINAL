<?php

function action_content()
{

$IMG = 'https://thisisatesttoseeifitworks.tk/deathshadow/images/ds-dirs.png';

echo $tmp = <<< ____EOT
<div class="alternating w88 mga p42 fjb">
				
  <h2 class="fsl"> Information </h2>
  <h3> <a href="https://forums.cutcodedown.com/index.php?topic=362.msg1977#msg1977">
  	Forum Explanation:
  	</a>
  </h3>

  <p class="tac w88 mga p42">
    <img src="$IMG" width="374" height="822" alt="ds-dirs.png">
  </p>

<pre class="p42 bgs bd1 wrap fjb">

Re: To Route Or Not To Route - The Definitive Guide???
« Reply #8 on: 2020-11-09, 20:31:19 »
Quote
Alright, I\'ve got \'till 11AM EST to work on tossing together a demo. Coding starts when this post goes up.

I want to do this "from scratch" to double-check and modernize my own methodologies. This way we have a simple clean slate without any left-over "Cruft" from other projects.

When doing this sort of thing I always like to work in the following order:

1. What\'s the content? I always say "content first" not just for design, but for the back end as well. Certainly things can change, but if you don't know what the data is or what you're going to serve client-side, how the blazes is one making rational choices about the back end?

This is where again, frameworks are a steaming pile of epic /fail/. People expect them to magically create their data handling / structure for them.

In this case it's easy, we're building a poor man's to glue together a template system to static pages. BUT, we're going to want it extensible so functionality can be easily added, as well as laying the ground work if one wants to expand it to use a database.

2. That content and functionality DICTATES directory structure!

For now I'm going with:

/ -- <strong class="fsl">index.php</strong>, ini files

<strong class="fsl">/actions</strong> -- location of each of our user calls

<strong class="fsl">/actions/actionName</strong> -- a directory holding all files specific to that action

<strong class="fsl">/actions/static</strong> -- the static page server, also our default action.

<strong class="fsl">/actions/static/pages</strong> -- the static page content to be served.

<strong class="fsl">/extras</strong> -- small sections usually plugged into "sidebars". We will code support for up to two sidebars.

<strong class="fsl">/fragments</strong> -- smaller user configurable "pieces" such as the footer content, the http error handler, and so forth.

<strong class="fsl">/images/</strong> -- content images

<strong class="fsl">/modals</strong> -- the content of any modal dialogs

<strong class="fsl">/template/templateName</strong> -- our various part.template.php and CSS

<strong class="fsl">/template/templateName/images</strong> -- presentational / template images

This is an improvement on my "classic" methodology in that I'm moving all files relating to a specific action into its own subdirectory. Laughably my old structure of putting the handlers directly into /actions stems from my old Borland Paradox codebases.

3. Code the common library functions and objects commonly needed on all pages. In this case we'll need a few string cleaners, a Request static object, a Settings static object, and a few DEFINE.

4. Write the index.php to get a general feel for what the various static sub-files need to handle.

5. Write the common template so that we have something to wrap our output in. I have a WIP generic outer template from another project that should fit the bill with minimal modifications. I actually made it for testing CSS variables.

6. Write the http error handlerm with no "actions" coded we can test this as a 404.

7. Write the /action/static (default) behavior to serve the appropriate page content

8. Write a static home page

9. Implement a dummy contact form (no send logic) to test a second action

10. Make a second "Static" page that's semi-dynamic (needs a couple of our Settings or define). Typically needed for images if system is not installed in root. Since my current modal technique doesn't like &lt;base&gt;

Now, for storing config data I'm going to use .ini files. I like them because PHP has a perfectly good parser built in, and you can do this:

<strong class="fsl">Code:</strong> [Select]
; &lt;?php die('hacking attempt detected';);

At the start of them so that SHOULD our redirects fail and someone tries to access them, it doesn't output our config info.

Thankfully ini allows for two-dimensional values, so an example default.ini.php (lifted straight off an existing page of mine) would go:

<strong class="fsl">Code:</strong> [Select]
; &lt;?php die(); // prevent direct calls just in case

; *** DO NOT MODIFY *** override in user.ini.php instead.

siteTitle = "default template"
h1Content = "Default Template"
template = "default"
currentPage = "home"

<strong class="fsl">[link]</strong>
favicon[rel] = "shortcut icon"
favicon[href] = favicon.ico

<strong class="fsl">[style]</strong>
vars.screen.css = "screen,projection,tv"
layout.screen.css = "screen,projection,tv"

See that on favicon? Noice.

Alright, let's start the clock. I've got an hour and a half until I have to stop working on this and zoom a potential client


; &lt;?php die('hacking attempt detected';);

At the start of them so that SHOULD our redirects fail and someone tries to access them, it doesn't output our config info.

Thankfully ini allows for two-dimensional values, so an example default.ini.php (lifted straight off an existing page of mine) would go:

<strong class="fsl">Code:</strong> [Select]
; &lt;?php die(); // prevent direct calls just in case

; *** DO NOT MODIFY *** override in user.ini.php instead.

siteTitle = "default template"
h1Content = "Default Template"
template = "default"
currentPage = "home"

<strong class="fsl">[link]</strong>
favicon[rel] = "shortcut icon"
favicon[href] = favicon.ico

<strong class="fsl">[style]</strong>
vars.screen.css = "screen,projection,tv"
layout.screen.css = "screen,projection,tv"

See that on favicon? Noice.

Alright, let's start the clock. I've got an hour and a half until I have to stop working on this and zoom a potential client.

&lt;div class="bd1"&gt; &lt;/div&gt;

Re: To Route Or Not To Route - The Definitive Guide???
« Reply #9 on: 2020-11-09, 20:42:53 »
Quote
Gonna write down some more notes as I go.

There will be two standard types of "content" includes declared by filename.

<strong class="fsl">.static</strong> -- static content to be sent direct to the output buffer via readFile

<strong class="fsl">.content.php</strong> -- contains an action_content() to be called by index.php

The module and extras systems will also have similar functionality, though their function name should be along the lines of:

<strong class="fsl">moduleName_run(\$data);</strong>

Which we can use the immediate var function trick to invoke.

<strong class="fsl">(\$moduleName . '_run')(\$data);</strong>

That way we can dynamically add relatively safely.

Oh, and when possible no .php files other than index.php should output ANYTHING if called directly. There may be a few exceptions, but that's the ideal.

</pre>		
</div><!-- class="alternating w88 mga p42" -->
____EOT;

}//
